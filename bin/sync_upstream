#!/bin/bash
# https://gist.github.com/Juraci/d1414f7c780e2dbe8204
# modified by klkyy2020(klkyy2020 at 163 dot com)

red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)

myexit() {
  reason=$1
  printf "${red}Failed: ${reason}!!!\n"
  exit 1
}


# default "`pwd`"
repo_path=$1
[ -z ${repo_path} ] && repo_path=`pwd`
[ -d $repo_path ] || myexit "First parameter is not directory"
# default "current branch"
branch=$2
if [[ -z $branch ]]; then 
  branch=`git rev-parse --abbrev-ref HEAD`
fi
# checks if it's a git repo
check_repo() {
  if [ ! -d `pwd`/.git ]; then
    myexit "`pwd` is not a git repo"
  fi 
}

# checks if there is a remote repo called upstream
check_upstream() {
  git remote -v | grep -w upstream > /dev/null
  # if there are no remote repository called upstream
  if [ $? -ne 0 ]; then
    myexit "Upstream not configured in this repo(`pwd`)"
  fi
}

# check if a branch was passed as parameter and if not it makes the master as the default branch
check_branch() {
  if [[ $branch ]]; then
    printf "${green}Branch to sync to is set to ${yellow}${branch}${green}\n"
  else
    myexit "Branch to sync not configured"
  fi
}

# fetch updates from upstream
# merges upstream with a given branch
# push the changes
sync() {
  printf "${green}Fetching its updates...\n"
  git fetch upstream
  if [ $? -eq 0 ]; then
    printf "${green}Merging updates with ${yellow}${branch}${green}\n"
    git merge upstream/$branch
    git push
  else
    myexit "Failed fetch upstream"
  fi
}

cur_path=`pwd`
cd $repo_path
check_repo
check_upstream
check_branch
sync
printf "\n${green}\u2714\n"
